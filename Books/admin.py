# admin.py
from django.contrib import admin

from django.contrib import messages
from Books.forms import BorrowRequestAdminForm
from .models import Author, Genre, Book, BookCopy, BorrowHistory
from .services import update_borrow_queue


@admin.register(Author)
class AuthorAdmin(admin.ModelAdmin):
    list_display = ('name', 'slug')
    search_fields = ('name',)
    prepopulated_fields = {'slug': ('name',)}


@admin.register(Genre)
class GenreAdmin(admin.ModelAdmin):
    list_display = ('name', 'slug')
    search_fields = ('name',)
    prepopulated_fields = {'slug': ('name',)}


@admin.register(BookCopy)
class BookCopyAdmin(admin.ModelAdmin):
    list_display = ('book', 'copy_id', 'is_available', 'damaged')
    list_filter = ('is_available', 'damaged', 'book__genre')
    search_fields = ('book__title', 'copy_id')
    readonly_fields = ('copy_id',)


class BookCopyInline(admin.TabularInline):
    model = BookCopy
    extra = 1  # –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–¥–Ω–æ –ø—É—Å—Ç–æ–µ –ø–æ–ª–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞


@admin.register(Book)
class BookAdmin(admin.ModelAdmin):
    list_display = ('title', 'year', 'isbn13', 'has_available_copies', 'get_authors', 'genre')
    list_filter = ('genre', 'year', 'authors')
    search_fields = ('title', 'isbn13', 'description')
    prepopulated_fields = {'slug': ('title',)}
    inlines = [BookCopyInline]

    def get_authors(self, obj):
        return ", ".join([author.name for author in obj.authors.all()])

    get_authors.short_description = '–ê–≤—Ç–æ—Ä—ã'

    def has_available_copies(self, obj):
        return obj.has_available_copies

    has_available_copies.boolean = True
    has_available_copies.short_description = '–î–æ—Å—Ç—É–ø–Ω–∞'


@admin.register(BorrowHistory)
class BorrowHistoryAdmin(admin.ModelAdmin):
    list_display = ('user', 'book_title', 'adminAction', 'borrowed_at', 'returned_at', 'due_back')
    list_filter = ('user', 'adminAction', 'borrowed_at')
    search_fields = ('user__username', 'copy__book__title')
    actions = ['delete_selected']  # —Ç–æ–ª—å–∫–æ —É–¥–∞–ª–µ–Ω–∏–µ

    def book_title(self, obj):
        return obj.copy.book.title

    book_title.short_description = '–ö–Ω–∏–≥–∞'

    # –ó–∞–ø—Ä–µ—Ç–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å"
    def has_add_permission(self, request):
        return False

    # –ó–∞–ø—Ä–µ—Ç–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π
    def has_change_permission(self, request, obj=None):
        return False

    # –†–∞–∑—Ä–µ—à–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ
    def has_delete_permission(self, request, obj=None):
        return True

    def get_readonly_fields(self, request, obj=None):
        return [f.name for f in self.model._meta.fields]


# admin.py
from datetime import timedelta
from django.utils import timezone
from django.contrib import admin
from .models import BorrowRequest, BookCopy, BorrowHistory


@admin.register(BorrowRequest)
class BorrowRequestAdmin(admin.ModelAdmin):
    form = BorrowRequestAdminForm

    list_display = ('user', 'book_title', 'status', 'requested_at', 'approved_at', 'due_back')
    list_filter = ('status', 'requested_at', 'approved_at', 'user', 'book')
    search_fields = ('user__username', 'book__title')

    readonly_fields = ('status', 'requested_at', 'approved_at', 'due_back')
    fieldsets = (
        ('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', {
            'fields': ('user',)
        }),
        ('–ö–Ω–∏–≥–∞', {
            'fields': ('book',)
        }),
        ('–î–∞—Ç—ã', {
            'fields': ('requested_at', 'approved_at', 'due_back'),
            'classes': ('collapse',)
        }),
        ('–°—Ç–∞—Ç—É—Å', {
            'fields': ('status',)
        }),
    )
    actions = ['approve_requests', 'reject_requests', 'mark_returned']

    # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –∫–Ω–∏–≥–∏ –≤ —Å–ø–∏—Å–∫–µ
    def book_title(self, obj):
        return obj.book.title
    book_title.short_description = '–ö–Ω–∏–≥–∞'
    book_title.admin_order_field = 'book__title'

    def get_actions(self, request):
        actions = super().get_actions(request)
        if 'delete_selected' in actions:
            del actions['delete_selected']
        return actions


    def save_model(self, request, obj, form, change):
        if not change:  # –¢–æ–ª—å–∫–æ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏
            obj.requested_at = timezone.now()

        super().save_model(request, obj, form, change)

    # –û–¥–æ–±—Ä–∏—Ç—å
    def approve_requests(self, request, queryset):
        for req in queryset.filter(status='pending'):
            # –ò—â–µ–º –ø–µ—Ä–≤—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é –∫–æ–ø–∏—é –∫–Ω–∏–≥–∏
            available_copy = BookCopy.objects.filter(
                book=req.book,
                is_available=True
            ).first()

            if not available_copy:
                # –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–ø–∏–π ‚Äî –º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∏–ª–∏ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –≤ –æ—á–µ—Ä–µ–¥—å
                self.message_user(request, f"–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–ø–∏–π –¥–ª—è {req.book.title}. –ó–∞–ø—Ä–æ—Å –ø—Ä–æ–ø—É—â–µ–Ω.")
                continue

            # –û–¥–æ–±—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å
            req.status = 'approved'
            req.approved_at = timezone.now()
            if not req.due_back:
                req.due_back = timezone.now() + timedelta(days=14)
            req.save()

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–ø–∏–∏
            available_copy.is_available = False
            available_copy.save()

            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏–∏ –≤—ã–¥–∞—á–∏
            BorrowHistory.objects.create(
                copy=available_copy,
                user=req.user,
                userAdmin=request.user,
                adminAction='approved',
                borrowed_at=timezone.now(),
                due_back=req.due_back
            )

        self.message_user(request, f"{queryset.count()} –∑–∞–ø—Ä–æ—Å(–æ–≤) –æ–¥–æ–±—Ä–µ–Ω–æ.")
    approve_requests.short_description = "‚úÖ –û–¥–æ–±—Ä–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã"

    # –û—Ç–∫–ª–æ–Ω–∏—Ç—å
    def reject_requests(self, request, queryset):
        pending_requests = queryset.filter(status='pending')
        count = pending_requests.count()
        admin_user = request.user

        # –°–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å–∏ –≤ –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        for req in pending_requests:
            any_copy = BookCopy.objects.filter(book=req.book).first()
            BorrowHistory.objects.create(
                copy=any_copy,  # –ö–æ–ø–∏—è –Ω–µ –Ω–∞–∑–Ω–∞—á–∞–ª–∞—Å—å, —Ç–∞–∫ –∫–∞–∫ –∑–∞–ø—Ä–æ—Å –±—ã–ª –æ—Ç–∫–ª–æ–Ω—ë–Ω
                user=req.user,
                userAdmin=admin_user,
                adminAction='refused'
            )
            update_borrow_queue(req.book)
        pending_requests.delete()
        self.message_user(request, f"{count} –∑–∞–ø—Ä–æ—Å(–æ–≤) –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏—Å—Ç–æ—Ä–∏—é.")

    reject_requests.short_description = "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã"

    # –í–æ–∑–≤—Ä–∞—â–µ–Ω–∞ (—É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏)
    def mark_returned(self, request, queryset):
        count = 0
        books_to_update = []

        for req in queryset.filter(status='approved'):
            # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∞–∫—Ç–∏–≤–Ω—É—é –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
            history_entry = BorrowHistory.objects.filter(
                user=req.user,
                copy__book=req.book,
                adminAction='approved',
                returned_at__isnull=True
            ).first()

            if history_entry and history_entry.copy:
                history_entry.returned_at = timezone.now()
                history_entry.adminAction = 'returned'
                history_entry.copy.is_available = True
                history_entry.copy.save()
                history_entry.save()

                books_to_update.append(req.book)
                req.delete()
                count += 1

        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—á–µ—Ä–µ–¥—å
        for book in set(books_to_update):
            update_borrow_queue(book)

        if count == 0:
            self.message_user(request, "–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤—ã–¥–∞—á –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞.", level=messages.WARNING)
        else:
            self.message_user(request, f"{count} –∫–Ω–∏–≥(–∞) —É—Å–ø–µ—à–Ω–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ(—ã).")
    mark_returned.short_description = "üì¶ –ö–Ω–∏–≥–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞"
